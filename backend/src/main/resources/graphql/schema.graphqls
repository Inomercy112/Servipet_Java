type Producto {
    idDto: ID!
    imagenProductoDto: String!
    nombreProductoDto: String!
    descripcionProductoDto: String!
    precioProductoDto: Int!
    cantidadProductoDto: Int!
    categoriasNombresDto: [String!]!
    duenoProductoDto: String!
}
type Respuesta {
    idDto: ID!
    idPreguntaDto: Pregunta!
    idUsuarioDto: String!
    descripcionDto: String!
    fechaCreacionDto: String!  # Usar String para fechas en GraphQL
    horaCreacionDto: String!   # Usar String para horas en GraphQL
}

type Pregunta {
    idDto: ID!
    idProductoDto: String!
    idUsuarioDto: String!
    descripcionDto: String!
    fechaCreacionDto: String!
    horaCreacionDto: String!
    respuestasDto: [Respuesta!]  # Relación con respuestas
}



type Query {
    getProductoByCategoria(categoriasNombresDto :String!): [Producto]
    getproductoById(idDto: ID!): Producto
    getproductoByNombre(nombreProductoDto : String): [Producto]
    getproductos: [Producto!]!
    getPreguntasPorProducto(idProducto: String!): [Pregunta!]!  # Nueva consulta
    getRespuestasPorPregunta(idPregunta: ID!): [Respuesta!]!    # Nueva consulta
}



type Mutation {
    registrarPregunta(pregunta: PreguntaInput!): Pregunta!      # Nueva mutación
    registrarRespuesta(respuesta: RespuestaInput!): Respuesta!  # Nueva mutación
}

input PreguntaInput {
    idProductoDto: String!
    idUsuarioDto: String!
    descripcionDto: String!
    fechaCreacionDto:String!
    horaCreacionDto:String!
}

input RespuestaInput {
    idPreguntaDto: ID!
    idUsuarioDto: String!
    descripcionDto: String!
}